{"version":3,"sources":["types/ErrorMessages.ts","components/PostItem/PostItem.tsx","components/PostsList/PostsList.tsx","components/CommentItem/CommentItem.tsx","components/CommentsList/CommentsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","api/comments.ts","components/PostDetails/PostDetails.tsx","components/UserSelector/UserSelector.tsx","components/NoPostsNotification/NoPostsNotification.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["ErrorMessages","PostItem","post","selectedPost","onPostSelect","id","title","className","type","classnames","onClick","PostsList","React","memo","posts","map","CommentItem","comment","onDelete","href","email","name","body","CommentsList","comments","style","listStyle","margin","padding","NewCommentForm","onAddComment","isLoading","useState","newComment","setNewComment","general","isError","setIsError","handleChange","event","target","value","prev","checkInputs","isErrorLocal","handleAddComment","a","preventDefault","onSubmit","htmlFor","placeholder","onChange","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","deleteComment","commentId","addComment","postId","PostDetails","setComments","setIsLoading","isLoadingAddButton","setIsLoadingAddButton","openForm","setOpenForm","error","setError","loadComments","useEffect","handleDeleteComment","filter","prevComment","length","UserSelector","users","selectedUser","onUserSelect","dropDownOpen","setDropDownOpen","openDropDownHandler","role","user","NoPostsNotification","App","setUsers","setPosts","setSelectedUser","setSelectedPost","loadUsers","useCallback","loadPosts","userId","showNoPostsNotification","showPostList","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03c47f02.chunk.js","sourcesContent":["export enum ErrorMessages {\n  name = 'Name is required',\n  email = 'Email is required',\n  body = 'Enter some text',\n  general = 'Something went wrong',\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  post: Post,\n  selectedPost: Post | null,\n  onPostSelect: (post: Post | null) => void,\n};\n\nexport const PostItem: React.FC<Props> = ({\n  post,\n  selectedPost,\n  onPostSelect,\n}) => {\n  const { id, title } = post;\n\n  const handlePostSelect = () => {\n    if (!selectedPost || selectedPost.id !== id) {\n      onPostSelect(post);\n    } else if (selectedPost.id === id) {\n      onPostSelect(null);\n    }\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={\n            classnames(\n              'button',\n              'is-link',\n              { 'is-light': id !== selectedPost?.id },\n              { 'is-link': selectedPost?.id === id },\n            )\n          }\n          onClick={() => handlePostSelect()}\n        >\n          {selectedPost?.id === id ? 'Close' : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { PostItem } from '../PostItem';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPost: Post | null,\n  onPostSelect: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  posts,\n  selectedPost,\n  onPostSelect,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <PostItem\n              key={post.id}\n              post={post}\n              selectedPost={selectedPost}\n              onPostSelect={onPostSelect}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","import React from 'react';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  comment: Comment,\n  onDelete: (commentId: number) => void,\n};\n\nexport const CommentItem: React.FC<Props> = ({\n  comment,\n  onDelete,\n}) => {\n  return (\n    <li\n      key={comment.id}\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n    >\n      <div className=\"message-header\">\n        <a href={`mailto:${comment?.email}`} data-cy=\"CommentAuthor\">\n          {comment?.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => onDelete(comment.id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </li>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../../types/Comment';\nimport { CommentItem } from '../CommentItem/CommentItem';\n\ntype Props = {\n  comments: Comment[],\n  onDelete: (commentId: number) => void,\n};\n\nexport const CommentsList: React.FC<Props> = React.memo(({\n  comments,\n  onDelete,\n}) => {\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n      <ul\n        className=\"comments-list\"\n        style={{ listStyle: 'none', margin: '0', padding: '0' }}\n      >\n        {comments.map(comment => (\n          <CommentItem key={comment.id} comment={comment} onDelete={onDelete} />\n        ))}\n      </ul>\n    </>\n  );\n});\n","import classnames from 'classnames';\nimport React, {\n  ChangeEvent, FormEvent, useState,\n} from 'react';\nimport { CommentData } from '../../types/Comment';\nimport { ErrorMessages } from '../../types/ErrorMessages';\n\ntype Props = {\n  onAddComment: (newComment: CommentData) => void,\n  isLoading: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({\n  onAddComment,\n  isLoading,\n}) => {\n  const [\n    newComment,\n    setNewComment,\n  ] = useState<CommentData>({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const [isError, setIsError] = useState({\n    name: false,\n    email: false,\n    body: false,\n    general: false,\n  });\n\n  const handleChange = (\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    setIsError(prev => {\n      return {\n        ...prev,\n        [name]: false,\n      };\n    });\n\n    setNewComment(prev => {\n      return {\n        ...prev,\n        [name]: value,\n      };\n    });\n  };\n\n  const checkInputs = () => {\n    setIsError({\n      name: false,\n      email: false,\n      body: false,\n      general: false,\n    });\n\n    const { name, email, body } = newComment;\n    let isErrorLocal = false;\n\n    if (!name) {\n      setIsError(prev => {\n        return {\n          ...prev,\n          name: true,\n        };\n      });\n\n      isErrorLocal = true;\n    }\n\n    if (!email) {\n      setIsError(prev => {\n        return {\n          ...prev,\n          email: true,\n        };\n      });\n\n      isErrorLocal = true;\n    }\n\n    if (!body) {\n      setIsError(prev => {\n        return {\n          ...prev,\n          body: true,\n        };\n      });\n\n      isErrorLocal = true;\n    }\n\n    return isErrorLocal;\n  };\n\n  const handleAddComment = async (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!checkInputs()) {\n      try {\n        onAddComment(newComment);\n        setNewComment(prev => {\n          return {\n            ...prev,\n            body: '',\n          };\n        });\n      } catch {\n        setIsError(prev => {\n          return {\n            ...prev,\n            general: true,\n          };\n        });\n      }\n    }\n  };\n\n  const handleResetForm = () => {\n    setNewComment({\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setIsError({\n      name: false,\n      email: false,\n      body: false,\n      general: false,\n    });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleAddComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={\n              classnames(\n                'input',\n                { 'is-danger': isError.name },\n              )\n            }\n            value={newComment.name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isError.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isError.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorMessages.name}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classnames(\n              'input',\n              { 'is-danger': isError.email },\n            )}\n            value={newComment.email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isError.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isError.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorMessages.email}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={\n              classnames(\n                'textarea',\n                { 'is-danger': isError.body },\n              )\n            }\n            value={newComment.body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {isError.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorMessages.body}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={\n              classnames(\n                'button',\n                'is-link',\n                { 'is-loading': isLoading },\n              )\n            }\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={() => handleResetForm()}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n});\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (\n  postId: number | undefined, newComment: CommentData,\n) => {\n  return client.post<Comment>('/comments', { ...newComment, postId });\n};\n","import React, { useEffect, useState } from 'react';\nimport { CommentsList } from '../CommentsList';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport { Post } from '../../types/Post';\nimport { Comment, CommentData } from '../../types/Comment';\nimport { addComment, deleteComment, getComments } from '../../api/comments';\n\ntype Props = {\n  post: Post | null,\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  post,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [\n    isLoadingAddButton,\n    setIsLoadingAddButton,\n  ] = useState<boolean>(false);\n  const [openForm, setOpenForm] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n\n  const loadComments = async () => {\n    setError(false);\n\n    if (!post) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const response = await getComments(post.id);\n\n      setComments(response);\n    } catch {\n      setError(true);\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    loadComments();\n    setOpenForm(false);\n  }, [post]);\n\n  const handleWriteCommentForm = () => {\n    setOpenForm(prev => !prev);\n  };\n\n  const handleDeleteComment = async (commentId: number) => {\n    setError(false);\n\n    try {\n      await deleteComment(commentId);\n      setComments(\n        prev => prev.filter(prevComment => prevComment.id !== commentId),\n      );\n    } catch {\n      setError(true);\n    }\n  };\n\n  const handleAddComment = async (\n    newComment: CommentData,\n  ) => {\n    setError(false);\n    setIsLoadingAddButton(true);\n\n    try {\n      const response = await addComment(post?.id, newComment);\n\n      setComments(prev => [...prev, response]);\n    } catch {\n      setError(true);\n    }\n\n    setIsLoadingAddButton(false);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading ? <Loader /> : (\n            <>\n              {error && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {!isLoading\n                && comments.length === 0\n                && !error\n                && (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                )}\n\n              {comments.length > 0\n                && (\n                  <CommentsList\n                    comments={comments}\n                    onDelete={handleDeleteComment}\n                  />\n                )}\n\n              {!openForm && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={handleWriteCommentForm}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n        </div>\n\n        {openForm\n          && (\n            <NewCommentForm\n              onAddComment={handleAddComment}\n              isLoading={isLoadingAddButton}\n            />\n          )}\n      </div>\n    </div>\n  );\n});\n","import classnames from 'classnames';\nimport React, { useState } from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  onUserSelect: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = React.memo(({\n  users,\n  selectedUser,\n  onUserSelect,\n}) => {\n  const [dropDownOpen, setDropDownOpen] = useState(false);\n\n  const openDropDownHandler = () => {\n    if (!dropDownOpen) {\n      setDropDownOpen(true);\n    } else {\n      setDropDownOpen(false);\n    }\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={openDropDownHandler}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {dropDownOpen && users.map(user => {\n            return (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={\n                  classnames(\n                    'dropdown-item',\n                    { 'is-active': user.id === selectedUser?.id },\n                  )\n                }\n                onClick={() => {\n                  openDropDownHandler();\n                  onUserSelect(user);\n                }}\n              >\n                {user.name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\n\nexport const NoPostsNotification: React.FC = React.memo(() => {\n  return (\n    <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n      No posts yet\n    </div>\n  );\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { NoPostsNotification } from './components/NoPostsNotification';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [error, setError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const loadUsers = useCallback(async () => {\n    setError(false);\n\n    try {\n      const response = await getUsers();\n\n      setUsers(response);\n    } catch {\n      setError(true);\n    }\n  }, []);\n\n  const loadPosts = useCallback(async () => {\n    setIsLoading(false);\n\n    if (!selectedUser) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const response = await getPosts(selectedUser.id);\n\n      setPosts(response);\n    } catch {\n      setError(true);\n    }\n\n    setIsLoading(false);\n  }, [selectedUser]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    setSelectedPost(null);\n    loadPosts();\n  }, [selectedUser]);\n\n  const showNoPostsNotification\n    = !isLoading\n    && selectedUser\n    && posts.length === 0;\n\n  const showPostList\n  = !isLoading\n  && posts.length > 0\n  && selectedUser !== null;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  onUserSelect={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!isLoading && !selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {error && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {showPostList\n                  && (\n                    <PostsList\n                      posts={posts}\n                      selectedPost={selectedPost}\n                      onPostSelect={setSelectedPost}\n                    />\n                  )}\n                {showNoPostsNotification\n                  && <NoPostsNotification />}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                post={selectedPost}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}